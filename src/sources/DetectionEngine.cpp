//
// Created by pp on 10.01.19.
//

#include "../includes/DetectionEngine.hpp"
#include "../includes/Histogram.hpp"
#include <opencv4/opencv2/opencv.hpp>
#include <opencv4/opencv2/xfeatures2d.hpp>

void DetectionEngine::train(const std::unique_ptr<Dataset> &dataset)
{
    if (!isInitialized()) {
        throw std::runtime_error("Detection engine is not well configured.");
    }

    // calculate features
    // cluster them
    // build histogram
    // train svm

    // Start
    std::cout << "Learning stage..." << std::endl;

    // STAGE 1 - Compute features
    auto samples = dataset->getSamples();
    cv::Mat descriptors;
    cv::Mat labels;

    for (auto &sample : samples) {
        sample.computeFeatures(_featuresExtractor);

        if (sample.getDescriptors().rows < 100) {
            std::cout << "Caution! Descriptor size is less than 100" << std::endl;
            continue;

        }

        descriptors.push_back(sample.getDescriptors());
        labels.push_back(sample.getLabelId());
    }
    std::cout << "Stage 1 completed." << std::endl;

    // STAGE 2 - Cluster features
    auto featuresClusters = _clusterClassifier->cluster(descriptors);
    _clusterClassifier->train(descriptors, featuresClusters);

    std::cout << "Stage 2 completed." << std::endl;

    // STAGE 3 - Build histogram
    auto histogram = std::make_unique<Histogram>(_clusterClassifier->getClustersCount());
    auto histogramResults = histogram->build(samples, featuresClusters);
    std::cout << "Stage 3 completed." << std::endl;

    // STAGE 4 - Scale data
    _scaler->transform(histogramResults);
    std::cout << "Stage 4 completed." << std::endl;

    // STAGE 5 - Train model
    _domainClassifier->train(histogramResults, labels);
    std::cout << "Stage 5 completed." << std::endl;
    std::cout << "Training completed." << std::endl;
}

float DetectionEngine::predict(Sample &sample)
{
    //Start
    std::cout << "Test stage" << std::endl;

    // STAGE 1
    sample.computeFeatures(_featuresExtractor);
    auto features = sample.getDescriptors();
    std::cout << "Stage 1 completed." << std::endl;

    // STAGE 2
    auto featuresClusters = _clusterClassifier->predict(features);
    std::cout << "Stage 2 completed." << std::endl;

    // STAGE 3
    auto histogram = std::make_unique<Histogram>(_clusterClassifier->getClustersCount());
    auto histogramResults = histogram->build(sample, featuresClusters);
    std::cout << "Stage 3 completed." << std::endl;

    // STAGE 4 - Scale data
    _scaler->transform(histogramResults);
    std::cout << "Stage 4 completed." << std::endl;

    // STAGE 5
    std::cout << "Stage 5 completed." << std::endl;
    std::cout << "Test completed." << std::endl;
    return _domainClassifier->predict(histogramResults);
}

bool DetectionEngine::isInitialized()
{
    return
            _clusterClassifier != nullptr &&
            _featuresExtractor != nullptr &&
            _domainClassifier != nullptr &&
            _scaler != nullptr;
}

void DetectionEngine::setClusterClassifier(std::shared_ptr<ClusterClassifier>&& clusterClassifier)
{
    _clusterClassifier = clusterClassifier;
}
void DetectionEngine::setFeaturesExtractor(std::shared_ptr<FeaturesExtractor>&& featuresExtractor)
{
    _featuresExtractor = featuresExtractor;
}
void DetectionEngine::setDomainClassifier(std::shared_ptr<DomainClassifier>&& domainClassifier)
{
    _domainClassifier = domainClassifier;
}
void DetectionEngine::setDataScaler(std::shared_ptr<Scaler>&& scaler)
{
    _scaler = scaler;
}