#include "../include/mainwindow.hpp"
#include "../include/predictdialog.hpp"
#include "../include/trainoptionswindow.hpp"
#include "../include/testoptionswindow.hpp"
#include "../include/configdialog.hpp"
#include <functional>
#include <QStyle>
#include <QDesktopWidget>
#include <QScreen>
#include <thread>
#include <QtCore/QModelIndex>
#include <QtCore/QThread>
#include <QtCore/QTextStream>
#include <iostream>
#include <QtWidgets/QtWidgets>
#include "ui_mainwindow.h"
#include "../include/workers/trainmodelworker.hpp"
#include "../include/workers/testmodelworker.hpp"
#include "../include/workers/predictworker.hpp"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->progressBar->hide();

    //Prediction
    qRegisterMetaType<PredictionStarted>("PredictionStarted");
    qRegisterMetaType<PredictionCompleted>("PredictionCompleted");
    connect(this, &MainWindow::predictionStarted, this, &MainWindow::handle_PredictionStarted);
    connect(this, &MainWindow::predictionCompleted, this, &MainWindow::handle_PredictionCompleted);

    //Training
    qRegisterMetaType<TrainingStarted>("TrainingStarted");
    qRegisterMetaType<TrainingStarted>("TrainingCompleted");
    connect(this, &MainWindow::trainingStarted, this, &MainWindow::handle_TrainingStarted);
    connect(this, &MainWindow::trainingCompleted, this, &MainWindow::handle_TrainingCompleted);

    //Stages
    qRegisterMetaType<StageChanged>("StageChanged");
    connect(this, &MainWindow::stateChanged, this, &MainWindow::handle_StageChanged);
}

MainWindow::MainWindow(const std::shared_ptr<DetectorSupervisor>& supervisor, QWidget *parent) :
    MainWindow(parent)
{
    _supervisor = supervisor;
}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::centerAndResize()
{
    QSize currentSize = geometry().size();
    QSize newSize( currentSize.width(), currentSize.height() );

    setGeometry(
        QStyle::alignedRect(
            Qt::LeftToRight,
            Qt::AlignCenter,
            newSize,
            QApplication::screens()[0]->geometry()
        )
    );

    setFixedSize(newSize);
}

void MainWindow::on_trainPushButton_clicked()
{
    TrainOptionsWindow dialog;
    auto res = dialog.exec();

    if (res == QDialog::Accepted) {
        QMessageBox box(QMessageBox::Question, tr("Potwierdzenie"), tr("Rozpocząć trening modelu?"), QMessageBox::Yes | QMessageBox::No, this);
        box.setButtonText(QMessageBox::Yes, tr("Tak"));
        box.setButtonText(QMessageBox::No, tr("Nie"));

        if (box.exec() == QMessageBox::Yes) {
            auto dir =  dialog.getDirectoryPath().toStdString();
            auto label = dialog.getLabelsPath().toStdString();

            TrainModelWorker* worker = new TrainModelWorker(_supervisor, dir, label); // memory leak!!!!!
            worker->start();
        }
    }
}

void MainWindow::on_predictPushButton_clicked()
{
    PredictDialog dialog;
    auto res = dialog.exec();

    if (res == QDialog::Accepted) {
        QMessageBox box(QMessageBox::Question, tr("Potwierdzenie"), tr("Rozpocząć predykcję?"), QMessageBox::Yes | QMessageBox::No, this);
        box.setButtonText(QMessageBox::Yes, tr("Tak"));
        box.setButtonText(QMessageBox::No, tr("Nie"));

        if (box.exec() == QMessageBox::Yes) {
            auto path = dialog.getFilepath().toStdString();
            PredictWorker* worker = new PredictWorker(_supervisor, path); // memory leak!!!!!
            worker->start();
        }
    }
}

void MainWindow::on_testPushButton_clicked()
{

    TestOptionsWindow dialog;
    auto res = dialog.exec();

    if (res == QDialog::Accepted) {
        QMessageBox box(QMessageBox::Question, tr("Potwierdzenie"), tr("Rozpocząć test modelu?"), QMessageBox::Yes | QMessageBox::No, this);
        box.setButtonText(QMessageBox::Yes, tr("Tak"));
        box.setButtonText(QMessageBox::No, tr("Nie"));

        if (box.exec() == QMessageBox::Yes) {
            auto dir =  dialog.getDirectoryPath().toStdString();
            auto label = dialog.getLabelsPath().toStdString();

            TestModelWorker* worker = new TestModelWorker(_supervisor, dir, label); // memory leak!!!
            worker->start();
        }
    }
}

void MainWindow::on_configPushButton_clicked()
{
    auto configs = _supervisor->getAllConfigurations();

    ConfigDialog dialog(configs);

    auto res = dialog.exec();

    if (res == ConfigDialog::ConfigSelected) {
        _supervisor->loadConfiguration(dialog.getSelectedConfigId());
    }
}

void MainWindow::on_exitPushButton_clicked()
{
    close();
}

void MainWindow::handle_PredictionStarted(PredictionStarted ev)
{
    ui->listWidget->addItem("Predykcja rozpoczęta.");
}

void MainWindow::handle_PredictionCompleted(PredictionCompleted ev)
{
    QMessageBox box;
    box.setStandardButtons(QMessageBox::Ok);
    box.setWindowTitle("Predykcja zakończona");

    QString str;
    str += "Badany plik: "; str += QString::fromStdString(ev.filename); str += "\n";
    str += "Identyfikator etykiety: "; str += QString::number(ev.outcomeLabelId); str += "\n";
    str += "Nazwa etykiety(rodzina oprogramowania): "; str += QString::fromStdString(ev.virusFamilyLabel); str += "\n";
    str += "Ilość deskryptorów: "; str += QString::number(ev.totalExtractedFeatures); str += "\n";

    box.setText(str);

    box.exec();
}

void MainWindow::handle_TrainingStarted(TrainingStarted ev)
{
    ui->progressBar->show();
    ui->listWidget->addItem("Trening rozpoczęty.");
}

void MainWindow::handle_TrainingCompleted(TrainingCompleted)
{
    ui->progressBar->hide();
    ui->listWidget->addItem("Trening zakończony pomyślnie.");
}

void MainWindow::handle_StageChanged(StageChanged ev)
{
    QString str;
    QTextStream out(&str);

    out << "Etap: "
        << ev.stageNumber
        << " - ";

    if (ev.currentState == STAGE_STATE::STARTED) {
        out << QString("rozpoczęty.");
        ui->progressBar->setValue(ev.stageNumber);
    } else {
        out << QString("zakończony.");
    }

    ui->listWidget->addItem(str);
}



