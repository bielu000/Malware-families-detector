#include "../include/mainwindow.hpp"
#include "../include/trainoptionswindow.hpp"
#include <functional>
#include <QStyle>
#include <QDesktopWidget>
#include <QScreen>
#include <thread>
#include <QtCore/QModelIndex>
#include <QtCore/QThread>
#include <QtCore/QTextStream>
#include <iostream>
#include "ui_mainwindow.h"
#include "../WorkerThread.cpp"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->progressBar->hide();

    //Training
    qRegisterMetaType<TrainingStarted>("TrainingStarted");
    qRegisterMetaType<TrainingStarted>("TrainingCompleted");
    connect(this, &MainWindow::trainingStarted, this, &MainWindow::handle_TrainingStarted);
    connect(this, &MainWindow::trainingCompleted, this, &MainWindow::handle_TrainingCompleted);

    //Stages
    qRegisterMetaType<StageChanged>("StageChanged");
    connect(this, &MainWindow::stateChanged, this, &MainWindow::handle_StageChanged);
}

MainWindow::MainWindow(QtAppController* pController, QWidget *parent) :
    MainWindow(parent)
{
    _controller = pController;
}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::centerAndResize()
{
    QSize currentSize = geometry().size();
    QSize newSize( currentSize.width(), currentSize.height() );

    setGeometry(
        QStyle::alignedRect(
            Qt::LeftToRight,
            Qt::AlignCenter,
            newSize,
            QApplication::screens()[0]->geometry()
        )
    );
}

void MainWindow::on_trainPushButton_clicked()
{
    TrainOptionsWindow dialog;
    dialog.setModal(true);
    dialog.exec();
}


void MainWindow::on_testPushButton_clicked()
{
    WorkerThread* workerThread = new WorkerThread(); // TODO Destroy!!!!!!!
    workerThread->setController(_controller);
    workerThread->start();
}

void MainWindow::handle_TrainingStarted(TrainingStarted ev)
{
    ui->progressBar->show();
    ui->listWidget->addItem("Trening rozpoczęty.");
}

void MainWindow::handle_TrainingCompleted(TrainingCompleted)
{
    ui->progressBar->hide();
    ui->listWidget->addItem("Trening zakończony pomyślnie.");
}

void MainWindow::handle_StageChanged(StageChanged ev)
{
    QString str;
    QTextStream out(&str);

    out << "Etap: "
        << ev.stageNumber
        << " - ";

    if (ev.currentState == STAGE_STATE::STARTED) {
        out << QString("rozpoczęty.");
        ui->progressBar->setValue(ev.stageNumber);
    } else {
        out << QString("zakończony.");
    }

    ui->listWidget->addItem(str);
}
