#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QStringListModel>
#include "../../events/events.hpp"
#include "qtappcontroller.hpp"
#include <vector>
namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = nullptr);
    MainWindow(const std::shared_ptr<DetectorSupervisor>&, QWidget *parent = nullptr);
    ~MainWindow();

    void centerAndResize();

signals:
    void trainingStarted(TrainingStarted);
    void trainingCompleted(TrainingCompleted);

    void stateChanged(StageChanged);

    void predictionStarted(PredictionStarted);
    void predictionCompleted(PredictionCompleted);

    void errorOccured(ErrorOccurred);

//maybe change to private
public slots:
    void on_predictPushButton_clicked();
    void on_trainPushButton_clicked();
    void on_testPushButton_clicked();
    void on_configPushButton_clicked();
    void on_exitPushButton_clicked();

    // DETECION ENGINE EVENTS
    void handle_TrainingStarted(TrainingStarted ev);
    void handle_TrainingCompleted(TrainingCompleted ev);

    void handle_StageChanged(StageChanged ev);

    void handle_PredictionStarted(PredictionStarted ev);
    void handle_PredictionCompleted(PredictionCompleted ev);

    void handle_ErrorOccured(ErrorOccurred ev);
    // DIALOG SLOTS


private slots:
    void on_actionClose_triggered();

    void on_actionFAQ_triggered();

private:
    void clearLog();

private:
    std::shared_ptr<DetectorSupervisor> _supervisor;
    Ui::MainWindow *ui;
};

#endif // MAINWINDOW_H
