//
// Created by pp on 19.01.19.
//

#ifndef THESIS_MESSAGEBUS_HPP
#define THESIS_MESSAGEBUS_HPP

#include <boost/signals2/signal.hpp>
#include "../../events/events.hpp"
#include "../../errors.hpp"

class MessageBus
{
public:
    //SIGNALS
    // --- DETECTION ENGINE --- //
    boost::signals2::signal<void (const TrainingStarted)> onTrainingStarted;
    boost::signals2::signal<void (const TrainingCompleted)> onTrainingCompleted;
    boost::signals2::signal<void (const TestStarted)> onTestStarted;
    boost::signals2::signal<void (const TestCompleted)> onTestCompleted;

    boost::signals2::signal<void (const StageChanged)> onStageChanged;

    boost::signals2::signal<void (const PredictionStarted)> onPredictionStarted;
    boost::signals2::signal<void (const PredictionCompleted)> onPredictionCompleted;

    // --- GENERAL --- //
    boost::signals2::signal<void (const ErrorOccurred)> onErrorOccurred;



    void event(const TrainingStarted ev) { onTrainingStarted(ev); } // trigger when start training phase
    void event(const TrainingCompleted ev) { onTrainingCompleted(ev); } // trigger when training phase is completed

    void event(const StageChanged ev) { onStageChanged(ev); } // trigger when train/prediction/test stage is changed

    void event(const TestStarted ev) { onTestStarted(ev); } // trigger when start testing
    void event(const TestCompleted ev) { onTestCompleted(ev); } // trigger when testing phase is completed

    void event(const PredictionStarted ev) { onPredictionStarted(ev); } // trigger when start prediction single file
    void event(const PredictionCompleted ev) { onPredictionCompleted(ev); } // trigger when completed prediction single file


    void error(const errors::codes code, const::std::string message = "")
    {
        ErrorOccurred er;
        er.code = code;
        er.message = message;

        onErrorOccurred(er);
    }
};

#endif //THESIS_MESSAGEBUS_HPP
