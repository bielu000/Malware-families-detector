//
// Created by pp on 19.01.19.
//

#ifndef THESIS_DETECTIONENGINEEVENTS_HPP
#define THESIS_DETECTIONENGINEEVENTS_HPP

#include "../errors.hpp"
#include <string>
#include <vector>

enum STAGE_STATE { STARTED, COMPLETED };
enum STAGE_TYPE { FEATURES_COMPUTATION = 1, CLUSTERING, VOCABULARY_COMPUTATION, NORMALIZATION, CLASSIFIER_EXECUTION };
enum STATUS { CORRECT, FAILED };

struct TrainingStarted {};
struct TrainingCompleted {};

struct StageChanged {
    int stageNumber;
    STAGE_STATE currentState;

    StageChanged() = default;
    StageChanged(STAGE_STATE s, int num)
        : currentState(s), stageNumber(num)
    {}
};

struct TestStarted {
};
struct TestCompleted {
    int totalFiles;
    int goodPredicted;
    int badPredicted;
    double accurracy;
    std::vector<std::string> rejectedFiles;
};

struct PredictionStarted {

};

struct PredictionCompleted {
    PredictionCompleted() = default;
    PredictionCompleted(STATUS s)
        : status(s), outcomeLabelId(0) {}

    PredictionCompleted(STATUS s, int labelId)
        : status(s), outcomeLabelId(labelId){}

    STATUS status;
    int outcomeLabelId;
    int totalExtractedFeatures;
    std::string virusFamilyLabel;
    std::string filepath;
    std::string filename;
};

struct ErrorOccurred
{
    errors::codes code;
    std::string message;
};


#endif //THESIS_DETECTIONENGINEEVENTS_HPP
