//
// Created by pp on 15.01.19.
//

#include "../includes/KMeansWrapper.hpp"
#include "../../exception.hpp"

cv::Mat KMeansWrapper::cluster(const cv::Mat& features)
{
    cv::kmeans(
            features,
            _clustersCount,
            _featuresClustersLabels,
            cv::TermCriteria(cv::TermCriteria::MAX_ITER + cv::TermCriteria::EPS, 300, 0.0001),
            10,
            cv::KMEANS_PP_CENTERS,
            _centers
    );

    return _featuresClustersLabels;
}

void KMeansWrapper::train(const cv::Mat &features, cv::Mat &clusters)
{
    _matcher->add(_centers);
}

cv::Mat KMeansWrapper::predict(const cv::Mat& features)
{
    if (!isTrained()) {
        throw app_exception(errors::codes::cluster_classifier_not_init, "Cluster classifier is not initialized.");
    }

    cv::Mat out;

    std::vector<cv::DMatch> matches;

    _matcher->match(features, matches);

    for (auto const& x : matches)
    {
        out.push_back(x.trainIdx);
    }

    return out;
}

void KMeansWrapper::load(const std::string &filepath)
{
    cv::FileStorage file(filepath, cv::FileStorage::WRITE);

    file["clusterDump"] >> _centers;

    _matcher->add(_centers);
}

void KMeansWrapper::save(const std::string &filepath)
{
    cv::FileStorage file(filepath, cv::FileStorage::WRITE);

    file << "clusterDump" << _centers;
}

bool KMeansWrapper::isTrained()
{
    return _centers.rows != 0;
}