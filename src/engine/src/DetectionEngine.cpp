//
// Created by pp on 10.01.19.
//

#include "../includes/DetectionEngine.hpp"
#include "../includes/Histogram.hpp"
#include "../../exception.hpp"

struct DetectorExecutionLog
{
    std::vector<Sample> invalidSamples;
};

void DetectionEngine::train(const std::unique_ptr<Dataset> &dataset)
{
    if (!isInitialized()) {
        throw app_exception(errors::codes::engine_not_initialized);
    }

    auto tracker = DetectorExecutionLog();

    // --- START --- //
    // --- STAGE 1 --- Compute features /
    _bus->event(TestStarted());
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::FEATURES_COMPUTATION));

    cv::Mat descriptors;
    cv::Mat labels;
    auto samples = dataset->getSamples();

    for (auto it = samples.begin(); it != samples.end(); ++it) {
        it->computeFeatures(_featuresExtractor);

        if (it->countDescriptors() < _clusterClassifier->getClustersCount()) {
            tracker.invalidSamples.push_back(*it);
            samples.erase(it);
            continue;
        }
        descriptors.push_back(it->getDescriptors());
    }

    for (auto& s : samples) {
        labels.push_back(s.getLabelId());
    }
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::FEATURES_COMPUTATION));


    // --- STAGE 2 --- Cluster features
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::CLUSTERING));
    auto featuresClusters = _clusterClassifier->cluster(descriptors);
    _clusterClassifier->train(descriptors, featuresClusters);
    featuresClusters = _clusterClassifier->predict(descriptors);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::CLUSTERING));


    // --- STAGE 3 --- Build vocabulary
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::VOCABULARY_COMPUTATION));
    auto histogram = std::make_unique<Histogram>(_clusterClassifier->getClustersCount());
    auto histogramResults = histogram->build(samples, featuresClusters);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::VOCABULARY_COMPUTATION));


    // --- STAGE 4 --- Scale data
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::NORMALIZATION));
    _scaler->transform(histogramResults);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::NORMALIZATION));


    // --- STAGE 5 --- Train model
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::CLASSIFIER_EXECUTION));
    _domainClassifier->train(histogramResults, labels);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::CLASSIFIER_EXECUTION));
    _bus->event(TrainingCompleted());
}

float DetectionEngine::predict(Sample &sample)
{
    // --- START --- //
    // --- STAGE 1 --- Compute features //
    _bus->event(PredictionStarted());
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::FEATURES_COMPUTATION));
    sample.computeFeatures(_featuresExtractor);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::FEATURES_COMPUTATION));

    if (sample.countDescriptors() < _clusterClassifier->getClustersCount()) {
        _bus->event(PredictionCompleted(STATUS::FAILED));

        throw app_exception(errors::codes::not_enough_descriptors);
    }

    // --- STAGE 2 --- Cluster features //
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::CLUSTERING));
    auto features = sample.getDescriptors();
    auto featuresClusters = _clusterClassifier->predict(features);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::CLUSTERING));


    // --- STAGE 3 --- Build vocabulary
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::VOCABULARY_COMPUTATION));
    auto histogram = std::make_unique<Histogram>(_clusterClassifier->getClustersCount());
    auto histogramResults = histogram->build(sample, featuresClusters);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::VOCABULARY_COMPUTATION));


    // --- STAGE 4 --- Scale data
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::NORMALIZATION));
    _scaler->transform(histogramResults);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::NORMALIZATION));


    // --- STAGE 5 -- Predict
    _bus->event(StageChanged(STAGE_STATE::STARTED, STAGE_TYPE::CLASSIFIER_EXECUTION));
    float labelId = _domainClassifier->predict(histogramResults);
    _bus->event(StageChanged(STAGE_STATE::COMPLETED, STAGE_TYPE::CLASSIFIER_EXECUTION));
    _bus->event(PredictionCompleted(STATUS::CORRECT, static_cast<int>(labelId)));

    return labelId;
}

bool DetectionEngine::isInitialized()
{
    return
            _clusterClassifier != nullptr &&
            _featuresExtractor != nullptr &&
            _domainClassifier != nullptr &&
            _scaler != nullptr &&
            _bus != nullptr;
}

void DetectionEngine::setClusterClassifier(std::shared_ptr<ClusterClassifier>&& clusterClassifier)
{
    _clusterClassifier = clusterClassifier;
}
void DetectionEngine::setFeaturesExtractor(std::shared_ptr<FeaturesExtractor>&& featuresExtractor)
{
    _featuresExtractor = featuresExtractor;
}
void DetectionEngine::setDomainClassifier(std::shared_ptr<DomainClassifier>&& domainClassifier)
{
    _domainClassifier = domainClassifier;
}
void DetectionEngine::setDataScaler(std::shared_ptr<Scaler>&& scaler)
{
    _scaler = scaler;
}

void DetectionEngine::setMessageBus(std::shared_ptr<MessageBus>& bus)
{
    _bus = bus;
}
