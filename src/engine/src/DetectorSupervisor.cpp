//
// Created by pp on 21.01.19.
//

#include <iostream>
#include "../includes/DetectorSupervisor.hpp"
#include "../../utility/Uuid.hpp"
#include "../../exception.hpp"
#include <experimental/filesystem>

void DetectorSupervisor::train(const std::string &dirPath, const std::string &labelsPath)
{
    try
    {
        auto trainDataset = std::make_unique<Dataset>(labelsPath, dirPath);
        _engine->train(trainDataset);
    }
    catch (app_exception& e) {
        _bus->error(e.code());
    }
    catch (std::exception& e) {
        std::cout << e.what() << std::endl;
    }
}

void DetectorSupervisor::test(const std::string &dirPath, const std::string &labelsPath)
{
    try {
        auto testDataset = std::make_unique<Dataset>(labelsPath, dirPath);
        _engine->test(testDataset);
    }
    catch (app_exception& e) {
        std::cout << e.code();
    }
    catch (std::exception& e) {
        std::cout << e.what() << std::endl;
    }
}

void DetectorSupervisor::predict(const std::string& filepath)
{
    std::experimental::filesystem::path path (filepath);

    auto p = path.filename();
    auto d = path.parent_path();

    auto fname = p.string();
    auto dir = d.string();

    try {
        Sample sample(fname, dir);
        _engine->predict(sample);

    }
    catch (app_exception& e) {
        std::cout << e.code() << std::endl;
        std::cout << e.what() << std::endl;

        _bus->error(e.code());
    }
    catch (std::exception& e) {
        std::cout << e.what() << std::endl;
    }
}


std::vector<Config> DetectorSupervisor::getAllConfigurations()
{
    std::vector<Config> configs;

    try {
       configs = _engine->config()->getAllConfigurations();
    }
    catch (app_exception& e) {
        std::cout << e.code() << std::endl;
        std::cout << e.what() << std::endl;
    }
    catch (std::exception& e) {
        std::cout << e.what() << std::endl;
    }

    return configs;
}

void DetectorSupervisor::loadConfiguration(const std::string &cfgId)
{
    try {
        _engine->loadConfiguration(cfgId);
    }
    catch (app_exception& e) {
        _bus->error(e.code());
    }
    catch (std::exception& e) {
        std::cout << e.what() << std::endl;
    }
}

void DetectorSupervisor::saveCurrentConfiguration()
{
    try {
        _engine->saveCurrentConfiguration();
    }
    catch (app_exception& e) {
        _bus->error(e.code());
    }
    catch (std::exception& e) {
        std::cout << e.what() << std::endl;
    }
}