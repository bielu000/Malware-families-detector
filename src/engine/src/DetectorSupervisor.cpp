//
// Created by pp on 21.01.19.
//

#include <iostream>
#include "../includes/DetectorSupervisor.hpp"
#include "../../utility/Uuid.hpp"
#include "../../exception.hpp"

void DetectorSupervisor::train(const std::string &dirPath, const std::string &labelsPath)
{
    try
    {
        auto trainDataset = std::make_unique<Dataset>(labelsPath, dirPath);
        _engine->train(trainDataset);

    } catch (std::exception& e) {

    }
}

void DetectorSupervisor::test(const std::string &dirPath, const std::string &labelsPath)
{
    throw std::runtime_error("Not completed!");
    try {

    } catch (std::exception& e) {

    } catch (app_exception& e) {
        std::cout << e.code();
    }
}

void DetectorSupervisor::predict(const std::string& filepath)
{
    try {




    } catch (app_exception& e) {
        throw ;
    } catch (std::exception& e) {

    }
}


std::vector<Config> DetectorSupervisor::getAllConfigurations()
{
    std::vector<Config> configs;

    try {
       configs = _engine->config()->getAllConfigurations();
    } catch (app_exception& e) {
        std::cout << e.code() << std::endl;
        std::cout << e.what() << std::endl;
    }


    return configs;
}

void DetectorSupervisor::loadConfiguration(const std::string &cfgId)
{
    try {
        _engine->loadConfiguration(cfgId);
    } catch (std::exception& e) {

    }
}