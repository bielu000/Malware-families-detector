//
// Created by pp on 26.01.19.
//

#include <fstream>
#include <algorithm>
#include "../includes/FileConfigProvider.hpp"
#include "../../exception.hpp"


FileConfigProvider::FileConfigProvider(const std::string& fname, const std::string& dir)
{
    _cfgFilename = fname;
    _rootDir = dir;

    auto dirPath = filesystem::path(_rootDir);

    _cfgFilepath = (dirPath /= _cfgFilename).string();

    init();
}

void FileConfigProvider::addConfiguration(const Config &cfg)
{
    _configs.push_back(cfg);
}

void FileConfigProvider::save()
{
    std::fstream file(_cfgFilepath, std::ios::out);

    if (file.bad()) {
        throw ApplicationException(errors::codes::cannot_save_config, "Cannot save config.");
    }

    std::unique_ptr<JsonSerializer<Config>> serializer = std::make_unique<ConfigSerializer>();
    auto result = serializer->serialize(_configs);

    file << result;
}

const std::vector<Config> FileConfigProvider::getAllConfigurations()
{
    if (!_isInitialized) {
        init();
    }

    return _configs;
}

const Config FileConfigProvider::getConfiguration(const std::string& id)
{
    if (!_isInitialized) {
        init();
    }

    auto it = std::find_if(_configs.begin(), _configs.end(), [&](const Config cfg)-> bool { return cfg.id == id; });

    if (it == _configs.end()) {
        throw ApplicationException(errors::codes::cannot_save_config);
    }

    return *it;
}

void FileConfigProvider::init()
{
    auto dirPath = filesystem::path(_rootDir);
    auto configPath = filesystem::path(_cfgFilepath);

    if (!filesystem::exists(dirPath)) {
        filesystem::create_directory(dirPath);
    }

    if (!filesystem::exists(configPath)) {
        std::fstream file(_cfgFilepath, std::ios::out);

        std::unique_ptr<JsonSerializer<Config>> serializer = std::make_unique<ConfigSerializer>();
        auto ret = serializer->serialize(_configs);

        file << ret;
    }

    std::fstream file(_cfgFilepath, std::ios::in);

    if (file.bad()) {
        throw ApplicationException(errors::codes::cannot_find_config);
    }

    std::stringstream stream;
    std::string content;

    while (file >> content) {
        stream << content;
    }

    std::unique_ptr<JsonDeserializer<Config>> deserializer = std::make_unique<ConfigDeserializer>(stream);

    _configs = deserializer->deserialize();
    _isInitialized = true;
}

std::string FileConfigProvider::generatePath(const std::string& filename)
{
    auto path = filesystem::path(_rootDir);

    path /= filename;

    return path.string();
}