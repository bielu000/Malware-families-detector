//
// Created by pp on 13.01.19.
//

#include <opencv2/core/mat.hpp>
#include <opencv2/core.hpp>
#include <iostream>
#include <fstream>
#include "../includes/StandardScaler.hpp"
#include "../../errors.hpp"
#include "../../exception.hpp"

void StandardScaler::transform(cv::Mat &data)
{
    if (_mean == 0.0 && _std == 0.0) {
        cv::Mat meanMat;
        cv::Mat stdMat;

        cv::meanStdDev(data, meanMat, stdMat);

        _mean = meanMat.at<double>(0, 0);
        _std = stdMat.at<double>(0, 0);
    }

    if (_std == 0.0) {
        throw app_exception(errors::codes::std_is_zero_value);
    }

    data -= _mean;
    data /= _std;
}

void StandardScaler::save(const std::string &filepath)
{
    std::fstream file(filepath, std::ios::out);

    // TODO: error checking

    std::unique_ptr<JsonSerializer<StandardScaler>> serializer = std::make_unique<StandardScalerSerializer>();

    auto ret = serializer->serialize(*this);

    file << ret;
}

void StandardScaler::load(const std::string &filepath)
{
    std::fstream file(filepath, std::ios::in);

    // TODO: error checking

    std::string str;
    std::stringstream stream;

    while (file >> str) {
        stream << str;
    }

    std::unique_ptr<JsonDeserializer<StandardScaler>> deserializer = std::make_unique<StandardScalerDeserializer>(stream);
    auto ret = deserializer->deserializeObject();

    _std = ret.getStd();
    _mean = ret.getMean();
}