//
// Created by pp on 13.01.19.
//

#ifndef THESIS_STANDARDSCALER_HPP
#define THESIS_STANDARDSCALER_HPP

#include "Scaler.hpp"
#include "../../utility/JsonSerializer.hpp"
#include "../../utility/JsonDeserializer.hpp"

class StandardScaler : public Scaler {
public:
    StandardScaler()
        : _mean(0.0), _std(0.0)
    {}
    void transform(cv::Mat& data) override;

    double getMean() const { return _mean; }
    double getStd() const { return _std; }

    void setMean(double mean) { _mean = mean; }
    void setStd(double std) { _std = std; }

    virtual void load(const std::string& filepath) override;
    virtual void save(const std::string& filepath) override;

private:
    double _mean;
    double _std;
};

class StandardScalerSerializer : public JsonSerializer<StandardScaler>
{
public:
    std::string serialize(const StandardScaler& scaler)
    {
        std::stringstream stream;

        stream
            << obj_start()
            << property("std", scaler.getStd()) << next()
            << property("mean", scaler.getMean())
            << obj_end();

        return stream.str();
    }
};

class StandardScalerDeserializer : public JsonDeserializer<StandardScaler>
{
public:
    explicit StandardScalerDeserializer(const std::stringstream& stream)
        : JsonDeserializer(stream)
    {}

    StandardScaler deserializeObject()
    {
        StandardScaler scaler;
        scaler.setStd(property<double>("std"));
        scaler.setMean(property<double>("mean"));

        return scaler;
    }
};


#endif //THESIS_STANDARDSCALER_HPP
