//
// Created by pp on 21.01.19.
//

#ifndef THESIS_DETECTORSUPERVISOR_HPP
#define THESIS_DETECTORSUPERVISOR_HPP

#include <string>

#include "../../bus/includes/MessageBus.hpp"
#include "DetectionEngine.hpp"

class DetectorSupervisor
{
public:
    DetectorSupervisor(std::unique_ptr<DetectionEngine>& engine, std::unique_ptr<MessageBus>& bus)
        : _engine(engine), _bus(bus)
    {}

    void train(const std::string& dirPath, const std::string& labelsPath);
    void test(const std::string& dirPath, const std::string& labelsPath);
    void predict(const std::string& filepath);

    std::vector<Config> getAllConfigurations();
    void loadConfiguration(const std::string& cfgId);
    void saveCurrentConfiguration();

private:
    std::unique_ptr<DetectionEngine>& _engine;
    std::unique_ptr<MessageBus>& _bus;
};

#endif //THESIS_DETECTORSUPERVISOR_HPP
