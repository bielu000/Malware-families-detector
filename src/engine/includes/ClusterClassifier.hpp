//
// Created by pp on 10.01.19.
//

#ifndef THESIS_CLUSTERCLASSIFIER_HPP
#define THESIS_CLUSTERCLASSIFIER_HPP

#include <opencv4/opencv2/core/mat.hpp>

class ClusterClassifier
{
public:
    explicit ClusterClassifier(int clusters)
        : _clustersCount(clusters)
    {}

    void setClustersCount(int clustersAmount) { _clustersCount = clustersAmount; }
    int getClustersCount() { return _clustersCount; }
    virtual cv::Mat cluster(const cv::Mat& features) = 0; // returns clusters
    virtual void train(const cv::Mat& features, cv::Mat& clusters) = 0;
    virtual cv::Mat predict(const cv::Mat&) = 0;
    virtual void load(const std::string& filepath) = 0;
    virtual void save(const std::string& filepath) = 0;
    virtual bool isTrained() = 0;

protected:
    int _clustersCount;
};

#endif //THESIS_CLUSTERCLASSIFIER_HPP
