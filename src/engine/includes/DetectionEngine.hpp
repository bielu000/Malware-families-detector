//
// Created by pp on 10.01.19.
//

#ifndef THESIS_DETECTIONENGINE_HPP
#define THESIS_DETECTIONENGINE_HPP

#include <memory>

#include "Dataset.hpp"
#include "ClusterClassifier.hpp"
#include "FeaturesExtractor.hpp"
#include "DomainClassifier.hpp"
#include "Scaler.hpp"
#include "../../bus/includes/MessageBus.hpp"
#include "ConfigProvider.hpp"


class DetectionEngine {
public:
    DetectionEngine(std::unique_ptr<MessageBus>& bus)
        : _bus(bus)
    {}
    void train(const std::unique_ptr<Dataset>& dataset);
    float predict(Sample& sample);
    void setClusterClassifier(std::shared_ptr<ClusterClassifier>&& clusterClassifier);
    void setFeaturesExtractor(std::shared_ptr<FeaturesExtractor>&& featuresExtractor);
    void setDomainClassifier(std::shared_ptr<DomainClassifier>&& domainClassifier);
    void setDataScaler(std::shared_ptr<Scaler>&& scaler);
    void setConfigProvider(std::shared_ptr<ConfigProvider>&& configProvider);

    void saveCurrentConfiguration();
    void loadConfiguration(const std::string& cfgId);
    std::shared_ptr<ConfigProvider>& config();

private:
    std::string getLabelName(int labelId);

private:
    std::shared_ptr<ClusterClassifier> _clusterClassifier;
    std::shared_ptr<FeaturesExtractor> _featuresExtractor;
    std::shared_ptr<DomainClassifier> _domainClassifier;
    std::shared_ptr<Scaler> _scaler;
    std::shared_ptr<ConfigProvider> _configProvider;
    std::unique_ptr<MessageBus>& _bus;

    bool isInitialized();
    bool isModelReady();

};

#endif //THESIS_DETECTIONENGINE_HPP
