//
// Created by pp on 26.01.19.
//

#ifndef THESIS_JSONSERIALIZER_HPP
#define THESIS_JSONSERIALIZER_HPP

#include <string>
#include <vector>
#include <sstream>

template <typename T>
class JsonSerializer
{
public:
    virtual ~JsonSerializer() = default;
    virtual std::string serialize(const T& obj) = 0;
    virtual std::string serialize(const std::vector<T>& v)
    {
        std::stringstream stream {};

        stream << list_start();

        for (int i = 0; i < v.size(); ++i) {
            stream << serialize(v[i]);

            if (i < v.size() -1) {
                stream << next();
            }
        }

        stream << list_end();

        return stream.str();
    }

protected:
    template <typename TProp>
    std::string property(const std::string& p, const TProp& v)
    {
        std::stringstream stream;

        // "property" : "value",
        stream
                << "\"" << p << "\""
                << " : "
                << "\"" << v << "\"";

        return stream.str();
    }

    char list_start() { return '['; };
    char list_end() { return ']'; };
    char obj_start() { return '{'; }
    char obj_end() { return '}'; };
    char next() { return ','; };
};

#endif //THESIS_JSONSERIALIZER_HPP
